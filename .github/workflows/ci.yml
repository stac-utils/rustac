name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_TERM_VERBOSE: true
  duckdb-version: "1.2.0"

jobs:
  test-core:
    name: Test stac
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Test
        run: cargo test -p stac --all-features
  check-features-core:
    name: Check all features
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: crates/core
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Install check-all-features
        run: cargo install cargo-all-features
      - name: Check
        run: cargo check-all-features
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Format
        run: cargo fmt --check
      - name: Clippy
        run: cargo clippy --workspace -- -D warnings
      - name: Test
        run: cargo test --all-features
  test-with-duckdb:
    name: Test w/ DuckDB
    runs-on: ubuntu-latest
    env:
      DUCKDB_LIB_DIR: /opt/duckdb
      LD_LIBRARY_PATH: /opt/duckdb
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: astral-sh/setup-uv@v5
      - name: Get DuckDB
        run: |
          wget https://github.com/duckdb/duckdb/releases/download/v${{ env.duckdb-version }}/libduckdb-linux-amd64.zip
          unzip libduckdb-linux-amd64.zip -d /opt/duckdb
      - name: Build # need to build first to get the executable for CLI tests
        run: cargo build -p stac-duckdb -p stac-cli -F duckdb
      - name: Test
        run: cargo test -p stac-duckdb -p stac-cli -F duckdb
      - name: Validate stac-server
        run: uv run --group stac-api-validator scripts/validate-stac-server
      - name: Validate stac-geoparquet
        run: uv run --group stac-geoparquet scripts/validate-stac-geoparquet
  test-pgstac:
    name: Test pgstac
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pgstac_version:
          - v0.8.6
          - v0.9.1
    env:
      DUCKDB_LIB_DIR: /opt/duckdb
      LD_LIBRARY_PATH: /opt/duckdb
    services:
      pgstac:
        image: ghcr.io/stac-utils/pgstac:${{ matrix.pgstac_version }}
        env:
          POSTGRES_USER: username
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgis
          PGUSER: username
          PGPASSWORD: password
          PGDATABASE: postgis
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: astral-sh/setup-uv@v5
      - name: Test
        run: cargo test -p pgstac --all-features
      - name: Validate
        run: uv run --group stac-api-validator scripts/validate-stac-server --pgstac
  check-nightly:
    name: Check (nightly)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - name: Check
        run: cargo check --workspace
  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@cargo-hack
      - name: Check msrv
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private
  doc:
    name: Docs
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: DavidAnson/markdownlint-cli2-action@v19
      - name: Doc
        run: cargo doc --workspace --all-features
